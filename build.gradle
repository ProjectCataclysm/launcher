plugins {
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

apply plugin: 'java'
apply plugin: 'com.github.johnrengelman.shadow'

def props = new Properties()
file("$projectDir/src/main/resources/build.properties").withInputStream { props.load(it) }
if (props.getProperty('version') == null) {
    throw new GradleException("Missing build.properties");
}

project.version = props.getProperty('version')

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

sourceSets {
    coreCommon {
        compileClasspath += sourceSets.main.compileClasspath
    }

    main {
        compileClasspath += sourceSets.coreCommon.runtimeClasspath
        runtimeClasspath += sourceSets.coreCommon.runtimeClasspath
    }

    test {
        compileClasspath += sourceSets.coreCommon.runtimeClasspath
        runtimeClasspath += sourceSets.coreCommon.runtimeClasspath
    }
}

configurations {
    commonJars {
        canBeConsumed = true
        canBeResolved = false
        extendsFrom implementation
    }
}

jar {
    manifest.attributes.put('Main-Class', 'Main')
    from sourceSets.coreCommon.output
}

shadowJar {
    classifier 'all'
    manifest.attributes.put('Main-Class', 'Main')

    exclude '**/*.txt'
    exclude '**/*.java'
    exclude '**/*.html'
    exclude 'proguard/**'
    from sourceSets.coreCommon.output
}

task commonJar(type: Jar) {
    classifier 'common'
    from sourceSets.coreCommon.output
}

artifacts {
    commonJars commonJar
    archives jar
    archives shadowJar
}

task obfuscate(type: JavaExec, dependsOn: shadowJar) {
	setMainClass('cataclysm.build.BuildTools')
    jvmArgs = ['-Dfile.encoding=UTF-8']

    doFirst {
        classpath = project.files("${project.projectDir}/../tools/build-tools/build/libs/build-tools.jar")
        classpath += project.project(':tools:build-tools').sourceSets.main.runtimeClasspath

        args = [
                '-job', 'transformObf',
                '-i', project.shadowJar.getArchiveFile().get().getAsFile(),
                '-o', "${project.buildDir}/libs/launcher-final.jar",
                '-cp', "${System.getProperty('java.home')}/lib/rt.jar",
                '-pm', "${project.buildDir}/libs/launcher-final.map",
                '-mainClass', 'Main',
                '-packageFilter', 'cataclysm.',
                '-keepAnnotations', 'proguard.annotation.Keep',
                '-m', 'launcher'
        ]
    }
}

task generateVersion(dependsOn: obfuscate) {
    description = 'Создает текстовый файл с версией лаунчера'
    try (PrintWriter pw = new PrintWriter("$buildDir/libs/version.txt")) {
        pw.println(project.version)
    }
}

task deploy(type: Copy, dependsOn: generateVersion) {
    group = 'deploying'

    from("$buildDir/libs") {
        include 'launcher-final.jar'
        include 'version.txt'
    }

	into "${project.getProperty('projectCataclysm.deployDirPath')}/launcher/"

    rename { String fileName ->
        fileName.replace('launcher-final.jar', 'launcher.jar')
    }
}

repositories {
    mavenCentral()
    maven { url "https://iudex.fi/maven/" }
}

dependencies {
//    implementation 'org.openjfx:javafx:11:pom'
    implementation 'org.jetbrains:annotations:15.0'
	implementation 'com.guardsquare:proguard-annotations:7.0.1'

    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'com.googlecode.json-simple:json-simple:1.1.1'

    implementation 'com.squareup.okhttp3:okhttp:4.10.0'
//    implementation 'org.libtorrent4j:libtorrent4j:2.0.6-26'
//    implementation 'org.libtorrent4j:libtorrent4j-windows:2.0.6-26'
//    implementation 'com.github.atomashpolskiy:bt-core:1.10'
//    implementation 'com.github.atomashpolskiy:bt-http-tracker-client:1.10'
//    implementation 'com.github.atomashpolskiy:bt-dht:1.10'
//    implementation 'com.github.atomashpolskiy:bt-upnp:1.10'

	testImplementation 'com.frostwire:jlibtorrent:1.2.0.18'
	testImplementation 'net.java.dev.jna:jna:4.4.0'
    testImplementation 'org.yaml:snakeyaml:1.29'
    testImplementation 'net.sf.jopt-simple:jopt-simple:5.0.3'
}

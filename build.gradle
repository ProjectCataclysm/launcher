plugins {
    id 'java'
    id 'application'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'org.jetbrains.kotlin.plugin.serialization' version '2.1.0'
    id 'org.openjfx.javafxplugin' version '0.0.13'
}

group 'ru.cataclysm'
version '2.0.0-1'

repositories {
    mavenCentral()
}

ext {
    junitVersion = '5.10.2'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = 'ru.cataclysm.main'
    mainClass = 'ru.cataclysm.LauncherKt'
}

kotlin {
    jvmToolchain(17)
}

compileKotlin {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

javafx {
    version = '21.0.5'
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation("com.squareup.okhttp3:okhttp:4.12.0")

    implementation("org.tinylog:tinylog-api-kotlin:2.7.0")
    implementation("org.tinylog:tinylog-impl:2.7.0")

    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-javafx:1.9.0")
    implementation("org.jetbrains.kotlinx:kotlinx-serialization-json-jvm:1.7.3")

    implementation("org.openjfx:javafx-graphics:$javafx.version:win")
    implementation("org.openjfx:javafx-graphics:$javafx.version:linux")

    implementation(files("$projectDir/libs/jlibtorrent-1.2.13.0.jar"))

//    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
//    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}


// jar task modification to include dependencies
task jarWithDependency(type: Jar) {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes 'Main-Class': 'ru.cataclysm.LauncherKt',
                'Implementation-Version': version
    }
    // Include the classpath from the dependencies
    from {
        exclude '**/module-info.class'
        exclude '**/META-INF/LICENSE'
        exclude '**/META-INF/NOTICE'
        exclude '**/META-INF/DEPENDENCIES'
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    // include libtorrent natives
    from {
        exclude '*.jar'
        "$projectDir/libs"
    }
} with jar
